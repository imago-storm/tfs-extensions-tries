import url = require('url');
import q = require('q');
import http = require('http');
import https = require('https');
import querystring = require('querystring');

class EFClient {
    endpoint: url.Url;
    username: string;
    password: string;
    skipCertCheck: boolean;

    constructor(endpoint: string, username: string, password: string, skipCertCheck: boolean) {
        this.endpoint = url.parse(endpoint + "/rest/v1.0");
        if(!this.endpoint.host) {
            throw new Error("No hostname found");
        }
        this.username = username;
        this.password = password;
        this.skipCertCheck = skipCertCheck;
    }

    getProject(projectName: string) {
       let promise = this.get("/projects/" + querystring.escape(projectName), undefined);
       return promise;
    }

    getPipeline(pipelineName: string, projectName: string) {
        let promise = this.get("/pipelines/" + querystring.escape(pipelineName), {projectName: projectName});
        return promise;
    }

    runPipeline(pipelineName: string, projectName: string) {
        return this.post("/pipelines", {pipelineName: pipelineName, projectName: projectName}, "");
    }

    // runPipeline(pipelineName: string, projectName: string) {
    //     let projectPromise = this.getProject(projectName);
    //     projectPromise.then((res) => {
    //         return this.getPipeline(pipelineName, projectName);
    //     }).then((res) => {
    //         return this.post("/pipelines");
    //     }).catch((e) => {
    //         console.log(e);
    //     });
    //     // let runPipelinePromise = pipelinePromise.then((res) => {
    //     //     return this.post("/pipelines", {pipelineName: pipelineName, projectName: projectName}, "");
    //     // }).catch((e) => {
    //     //     console.log("Error occured: ", e);
    //     // });
    //     // return runPipelinePromise;
    // }

    request(path: string, method: string, query: any, payload: string) {
        var def = q.defer();
        let endpoint = this.endpoint;

        let port = endpoint.port ? parseInt(endpoint.port) : 443;
        if (this.skipCertCheck) {
            process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
        }

        let queryString = "";
        if (query) {
            let pairs = new Array();
            for(let key in query) {
                let value = query[key];
                pairs.push(key + "=" + querystring.escape(value));
            }
            queryString = '?' + pairs.join("&");
        }

        var options = {
            host: endpoint.hostname,
            port: port,
            method: method,
            path: endpoint.path + path + queryString,
            auth: this.username + ':' + this.password,
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        };
        console.log(options);
        var responseString = "";
        let req = https.request(options, (res) => {

            res.setEncoding('utf8');
            res.on('data', (chunk) => {
                responseString += chunk;
            });
            res.on('end', () => {
                let statusCode = res.statusCode;
                if (statusCode == 200) {
                    var responseObject = JSON.parse(responseString);
                    def.resolve(responseObject);
                }
                else {
                    def.reject({statusCode: statusCode, response: JSON.parse(responseString)});
                }
            })
        }).on('error', (e) => {
            console.log('http request error');
            def.reject(e);
        });

        if (payload) {
            req.write(payload);
        }

        req.end();

        return def.promise;
    }

    post(path: string, query: any, payload: string) {
        return this.request(path, 'POST', query, payload);
    }

    put(path: string, query: any, payload: string) {
        return this.request(path, 'PUT', query, payload);
    }

    get(path: string, query: any) {
        return this.request(path, 'GET', query, undefined);
    }

    __get(path: string) {
        var def = q.defer();
        let endpoint = this.endpoint;
        let port = endpoint.port ? parseInt(endpoint.port) : 443;
        process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

        var options = {
            host: endpoint.hostname,
            port: port,
            path: endpoint.path + path,
            auth: this.username + ':' + this.password,
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        };
        console.log('GET http://' + options.host + ':' + options.port + options.path);
        var responseString = "";
        https.get(options, (res) => {
            res.setEncoding('utf8');
            res.on('data', (chunk) => {
                responseString += chunk;
            });
            res.on('end', () => {
                let statusCode = res.statusCode;
                if (statusCode == 200) {
                    var responseObject = JSON.parse(responseString);
                    def.resolve(responseObject);
                }
                else {
                    def.reject({statusCode: statusCode, response: JSON.parse(responseString)});
                }
            })
        }).on('error', (e) => {
            console.log('http request error');
            def.reject(e);
        });
        return def.promise;
    }
}
export { EFClient };
export interface EFProject {
    projectName: string
};

export interface EFProjectAnswer {
    project: EFProject
};
